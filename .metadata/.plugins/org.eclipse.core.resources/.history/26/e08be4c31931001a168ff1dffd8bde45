package com.md.dao;
import static com.mb.db.JDBCTemplate.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
//import에 static을 붙이면 class를 생략하고 메소드만 사용할 수 있다.static 없는 경우엔 class.method로 호출해야함

import com.md.dto.MDBoardDto;

public class MDBoardDao {

	public List<MDBoardDto> selectList(){
		Connection con = getConnection();
		Statement stmt = null;
		ResultSet rs = null;
		String sql = " SELECT SEQ, WRITER, TITLE, CONTENT, REGDATE "
				+ " FROM MDBOARD "
				+ " ORDER BY SEQ DESC ";
		List<MDBoardDto> list = new ArrayList<MDBoardDto>();
		
		try {
			stmt = con.createStatement();
			System.out.println("쿼리준비");
			
			rs = stmt.executeQuery(sql);
			System.out.println("실행 및 리턴");
			
			while(rs.next()) {
				MDBoardDto dto = new MDBoardDto();
					dto.setSeq(rs.getInt(1));
					dto.setWriter(rs.getString(2));
					dto.setTitle(rs.getString(3));
					dto.setContent(rs.getString(4));
					dto.setRegdate(rs.getDate(5));
					
					list.add(dto);
								
			}			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(rs);
			close(stmt);
			close(con);
			System.out.println("db종료");
		}
		
		return list;
	}
	
	public MDBoardDto selectOne(int seq){
		
		Connection con = getConnection();
		PreparedStatement pstm = null;
		ResultSet rs = null;
		
		MDBoardDto dto = null;
		
		String sql = " SELECT SEQ, WRITER, TITLE, CONTENT, REGDATE "
				+ " FROM MDBOARD "
				+ " WHERE SEQ = ? ";
		
		try {
			pstm = con.prepareStatement(sql);
			pstm.setInt(1, seq);
		
			rs = pstm.executeQuery();
			while (rs.next()) {
			dto = new MDBoardDto();
				dto.setSeq(rs.getInt(1));
				dto.setWriter(rs.getString(2));
				dto.setTitle(rs.getString(3));
				dto.setContent(rs.getString(4));
				dto.setRegdate(rs.getDate(5));
				
			}
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			close(rs);
			close(pstm);
			close(con);
		}	
		
		return dto;
	}
	
	public int insert(MDBoardDto dto) {
		
		Connection con = getConnection();
		PreparedStatement pstm = null;
		int res = 0;
		
		String sql = " INSERT INTO MDBOARD "
				+ " VALUES(MDBOARDSEQ.NEXTVAL,?,?,?,SYSDATE) ";
		
		try {
			pstm = con.prepareStatement(sql);
			pstm.setString(1, dto.getWriter());
			pstm.setString(2, dto.getTitle());
			pstm.setString(3, dto.getContent());
			
			res = pstm.executeUpdate();
			System.out.println("실행 및 리턴");
			
			if(res>0) {
				commit(con);	
			}			
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(pstm);
			close(con);
		}
		
		return res;
	}
	
	public int update(MDBoardDto dto) {
		
		Connection con = getConnection();
		PreparedStatement pstm = null;
		int res = 0;
		
		String sql = " UPDATE MDBOARD SET TITLE = ?, CONTENT =? "
				+ " WHERE SEQ = ? ";
		
		try {
			pstm = con.prepareStatement(sql);
			pstm.setString(1, dto.getTitle());
			pstm.setString(2, dto.getContent());
			pstm.setInt(3, dto.getSeq());
		
			res = pstm.executeUpdate();
			
			if(res >0) {
				commit(con);
			}
		
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(pstm);
			close(con);
		}
		
		
		
		return res;
		
	}
	
	public int delete(int seq) {
		
		Connection con = getConnection();
		PreparedStatement pstm = null;
		int res = 0;
		
		String sql = " DELETE FROM MDBOARD WHERE SEQ =? ";
		
		try {
			pstm = con.prepareStatement(sql);
			pstm.setInt(1, seq);
			
			res = pstm.executeUpdate();
			
			if(res>0) {
				commit(con);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			close(pstm);
			close(con);
		}
		
		
		
		return res;	
		
	}
	
	public int multiDelete(String[] seq) {
		
		Connection con = getConnection();
		PreparedStatement pstm = null;
		int res = 0;
		String sql = " DELETE FROM MDBOARD WHERE SEQ  =? ";
		
		int[] cnt = null;
		try {
			pstm = con.prepareStatement(sql);

			for(int i = 0; i <seq.length ; i++) {
				pstm.setString(1, seq[i]);
				pstm.addBatch();	//메모리에 적재후, executeBatch() 메소드가 호출될 때 한번에 실행
				System.out.println("delete no : "+ seq[i]);
			}
			System.out.println("3 쿼리준비 "+sql);
			
			cnt = pstm.executeBatch();	//메모리에 있던 쿼리를 한번에 실행, int[]로 리턴
			System.out.println("4.실행 및 리턴");
		
			// 배열로 리턴해주기 때문에 몇번째가 성공하고 실패했는지 알 수 있다[-2,-2,-3,...]으로 리턴되기 때문에
			for(int i = 0; i < cnt.length; i++) {
				//-2 : 성공, -3 : 실패				
				if(cnt[i] == -2) {
					res++;
				}
			}
			if(res == seq.length) {
				commit(con);
			}
		
		} catch (SQLException e) {
			System.out.println("error 3,4");
			e.printStackTrace();
		}finally {
			close(pstm);
			close(con);
			System.out.println("5.db종료");
		}
		
		
		
		
		return res;
	}
	
	
	
	
}
